#version 330

in vec3 pos;
in vec2 tex;
in vec3 nor;		// nor contains (tileX, tileZ, tileIndex)
in vec4 tangent;

flat out int lodLevel;
out vec2 texCoords;
out float height;

/* Height map sampler */
uniform sampler2D heightMap;

layout (std140) uniform VIEW {
	vec3 CAMPOSWORLD;
	mat4 CAMERA;
	mat4 PERSPECTIVE;
};

layout (std140) uniform TERRAIN_CONSTANTS {
	vec2 RANGES_SQUARED[10];
	float SCALES[10];
	vec2 GRID_SIZE;
	vec2 TERRAIN_SIZE;
	float MAX_HEIGHT;
	int START_RANGE;
};

layout (std140) uniform TERRAIN_NODE {
	int LOD_LEVEL;
	vec2 TERRAIN_POS;
};

// Function prototypes //
vec2 morphVertex(vec2 gridPos, vec2 vertex, float morphValue);

void main(){
	lodLevel = LOD_LEVEL;

	vec2 gridPos = pos.xz;
	vec2 gridPosWorld = gridPos * SCALES[LOD_LEVEL] + TERRAIN_POS;
	
	// Get height correct way?
	float heightApprox = texture2D(heightMap, gridPosWorld / TERRAIN_SIZE).g * MAX_HEIGHT;
	vec3 worldPos = vec3(gridPosWorld.x, heightApprox, gridPosWorld.y);
	
	vec3 camToWorldPos = worldPos - CAMPOSWORLD;
	float distanceToCameraSqr = dot(camToWorldPos, camToWorldPos);
	
	vec2 squaredRanges = RANGES_SQUARED[START_RANGE + LOD_LEVEL];
	float morphRangeSqr = squaredRanges.x;
	float rangeSqr = squaredRanges.y;
	
	float morphValue = clamp((distanceToCameraSqr - morphRangeSqr) / rangeSqr, 0.0f, 1.0f);
	vec2 morphedVertex = morphVertex(gridPos, gridPosWorld, morphValue);
	
	// Get normals
	texCoords = morphedVertex / TERRAIN_SIZE;
	
	// Get height correct way?
	vec2 mapTextureCoordinates = morphedVertex / TERRAIN_SIZE;
	height = texture2D(heightMap, mapTextureCoordinates).g * MAX_HEIGHT;
	
	vec4 finalPos = vec4(morphedVertex.x, height, morphedVertex.y, 1.0f);
	
	vec4 clipPlane = vec4(0.0f, -1.0f, 0.0f, 30.0f);
	gl_ClipDistance[0] = dot(clipPlane, finalPos);
	
	gl_Position = PERSPECTIVE * CAMERA * finalPos;
}

// Morphs vertex from high to low detailed mesh position
//	- gridPos: x, z components of vertex in grid.
//	- vertex: x, z components of vertex in world space
//	- morphValue: morph value
vec2 morphVertex(vec2 gridPos, vec2 vertex, float morphValue){
	return vertex - mod(gridPos, 2.0f) * SCALES[LOD_LEVEL] * morphValue;
}