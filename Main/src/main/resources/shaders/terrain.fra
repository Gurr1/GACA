#version 330

flat in int lodLevel;
in vec2 texCoords;
in vec3 norm;
in float height;

in vec4 debugClipMode;

/* Texture test sampler */
uniform sampler2D testSampler;

/* Fragment output color */
out vec4 COLOR;

void main(){
	const vec3 lodColors[3] = vec3[](vec3(1.0f, 0.6f, 0.6f), vec3(0.6f, 1.0f, 0.6f), vec3(0.6f, 0.6f, 1.0f));

	vec3 ambient = vec3(0.3f, 0.3f, 0.3f);
	vec3 diffuse = vec3(0.4f, 1.0f, 0.45f);//texture2D(testSampler, texCoords).rgb;//lodColors[int(mod(lodLevel, 3))];
	
	
	if(height < 3.00f)
		diffuse = vec3(0.4f, 0.4f, 1.0f);
	else if(height < 5.0f)
		diffuse = vec3(1.0f, 0.8f, 0.5f);
	else if(height < 30.0f)
		diffuse = vec3(0.3f, 0.7f, 0.3f);
	else if(height < 70.0f)
		diffuse = vec3(0.6f, 0.6f, 0.6f);
	else
		diffuse = vec3(0.9f, 0.9f, 1.0f);
	
	
	vec3 lightDir = normalize(vec3(1.0f, 1.0f, -1.0f));
	//vec3 norm = normalize(texture2D(normalMap, texCoords).rgb * 2.0f - 1.0f);
	
	float diffuseIntensity = max(dot(lightDir, norm), 0.0f);
	diffuse = diffuse * diffuseIntensity;
	
	const float brightness = 1.0f;
	
	// Set fragment output color
	COLOR = vec4((ambient + diffuse) * brightness, 1.0f);
	
	// DEBUG STUFF //
	/*
	diffuse = vec3(0.5f, 0.5f, 0.5f);
	if(mod(lodLevel, 3) == 0)
		diffuse = vec3(0.6f, 1.0f, 0.6f);
	else if(mod(lodLevel, 3) == 1)
		diffuse = vec3(0.6f, 0.6f, 1.0f);
	else if(mod(lodLevel, 3) == 2)
		diffuse = vec3(1.0f, 0.6f, 0.6f);
	
	COLOR = vec4(diffuse, 1.0f);
	*/
}